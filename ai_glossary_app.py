import streamlit as st
import pandas as pd
from fuzzywuzzy import fuzz

# Yeni veri: Yapay zeka terimleri ve a√ßƒ±klamalarƒ±
data = [
    {"English": "Artificial Intelligence", "Turkish": "Yapay Zeka", "Azerbaijani": "S√ºni ƒ∞ntellekt", "Description": "Yapay zeka, makinelerin insanlar gibi d√º≈ü√ºnmesini saƒülayan bir alandƒ±r."},
    {"English": "Machine Learning", "Turkish": "Makine √ñƒürenmesi", "Azerbaijani": "Ma≈üƒ±n √ñyr…ônm…ôsi", "Description": "Makine √∂ƒürenmesi, bilgisayarlarƒ±n verilerle √∂ƒürenme s√ºrecidir."},
    {"English": "Deep Learning", "Turkish": "Derin √ñƒürenme", "Azerbaijani": "D…ôrin √ñyr…ônm…ô", "Description": "Derin √∂ƒürenme, daha karma≈üƒ±k modelleme ve b√ºy√ºk veri ile √∂ƒürenme y√∂ntemidir."},
    {"English": "Neural Network", "Turkish": "Sinir Aƒüƒ±", "Azerbaijani": "Sinir ≈û…ôb…ôk…ôsi", "Description": "Sinir aƒüƒ±, insan beyninin √ßalƒ±≈üma prensibinden ilham alƒ±narak tasarlanmƒ±≈ü bir makine √∂ƒürenmesi modelidir."},
    {"English": "Natural Language Processing", "Turkish": "Doƒüal Dil ƒ∞≈üleme", "Azerbaijani": "T…ôbii Dil Emalƒ±", "Description": "Doƒüal dil i≈üleme, makinelerin insan dilini anlamasƒ± ve i≈ülemesi i√ßin kullanƒ±lan bir alandƒ±r."},
    {"English": "Reinforcement Learning", "Turkish": "Peki≈ütirmeli √ñƒürenme", "Azerbaijani": "M√∂hk…ôml…ôndirici √ñyr…ônm…ô", "Description": "Peki≈ütirmeli √∂ƒürenme, ajanlarƒ±n bir ortamda √∂d√ºller veya cezalar alarak karar vermeyi √∂ƒürenmesidir."},
    {"English": "Computer Vision", "Turkish": "Bilgisayarla G√∂r√º", "Azerbaijani": "Komp√ºter G√∂rm…ôsi", "Description": "Bilgisayarla g√∂r√º, makinelerin g√∂r√ºnt√ºleri anlamasƒ± ve i≈ülemesiyle ilgili bir alandƒ±r."},
    {"English": "Transformer", "Turkish": "D√∂n√º≈üt√ºr√ºc√º", "Azerbaijani": "Transformator", "Description": "Transformer, dil modellerinde kullanƒ±lan ve b√ºy√ºk veri √ºzerinde etkili olan bir derin √∂ƒürenme modelidir."},
    {"English": "Recurrent Neural Network", "Turkish": "Tekrarlayan Sinir Aƒüƒ±", "Azerbaijani": "T…ôkrarlanan Sinir ≈û…ôb…ôk…ôsi", "Description": "Tekrarlayan sinir aƒülarƒ±, sƒ±ralƒ± veri i≈ülemek i√ßin kullanƒ±lan bir t√ºr sinir aƒüƒ±dƒ±r."},
    {"English": "Convolutional Neural Network", "Turkish": "Konvol√ºsyonel Sinir Aƒüƒ±", "Azerbaijani": "Konvolusyonal Sinir ≈û…ôb…ôk…ôsi", "Description": "Konvol√ºsyonel sinir aƒülarƒ±, √∂zellikle g√∂r√ºnt√º i≈üleme i√ßin yaygƒ±n olarak kullanƒ±lƒ±r."},
    {"English": "Generative Adversarial Networks", "Turkish": "√úretici Kar≈üƒ±t Aƒülar", "Azerbaijani": "N…ôsil ∆èks…ô Uƒüurlu ≈û…ôb…ôk…ôl…ôr", "Description": "√úretici kar≈üƒ±t aƒülar, ger√ßek√ßi veriler √ºretmek i√ßin kullanƒ±lan bir yapay zeka modelidir."},
    {"English": "Natural Language Generation", "Turkish": "Doƒüal Dil √úretimi", "Azerbaijani": "T…ôbii Dil Yaratma", "Description": "Doƒüal dil √ºretimi, makinelerin anlamlƒ± metinler √ºretmesini saƒülayan bir alandƒ±r."},
    {"English": "AutoML", "Turkish": "Otomatik Makine √ñƒürenmesi", "Azerbaijani": "Avtomatik Ma≈üƒ±n √ñyr…ônm…ôsi", "Description": "Otomatik makine √∂ƒürenmesi, makine √∂ƒürenmesi modellerini otomatik olarak olu≈üturmak i√ßin kullanƒ±lan bir tekniktir."},
]

df = pd.DataFrame(data)

st.title("ü§ñ Yapay Zeka Terimleri S√∂zl√ºƒü√º (TR / AZ)")

# Kullanƒ±cƒ±nƒ±n arama yapacaƒüƒ± metin giri≈üi
search_term = st.text_input("üîç Bir terim girin (ƒ∞ngilizce / T√ºrk√ße / Azerbaycanca):").strip().lower()

# Dil se√ßimi
language = st.radio("Dil Se√ßin:", ("English", "Turkish", "Azerbaijani"))

# Favori terimler listesi
if 'favorites' not in st.session_state:
    st.session_state.favorites = []

# En √ßok aranan terimler
if 'search_history' not in st.session_state:
    st.session_state.search_history = []

def search_glossary(term, language):
    if term == "":
        return df
    else:
        def is_match(row):
            return fuzz.partial_ratio(term, row[language].lower()) > 70
        return df[df.apply(is_match, axis=1)]

filtered_df = search_glossary(search_term, language)

# Sonu√ßlarƒ± kullanƒ±cƒ±ya g√∂ster
st.write(f"### Sonu√ßlar ({len(filtered_df)} terim bulundu)")
for idx, row in filtered_df.iterrows():
    st.write(f"**{row['English']}** ({row['Turkish']} / {row['Azerbaijani']})")
    st.write(f"  *A√ßƒ±klama:* {row['Description']}")
    if st.button(f"Favorilere Ekle: {row['English']}", key=f"fav_{row['English']}"):
        st.session_state.favorites.append(row['English'])
        st.success(f"{row['English']} favorilerinize eklendi!")

# Favori terimleri g√∂ster
st.write("### Favori Terimler")
if st.session_state.favorites:
    st.write(", ".join(st.session_state.favorites))
else:
    st.write("Hen√ºz favori teriminiz yok.")

# En √ßok aranan terimleri g√∂ster
if len(st.session_state.search_history) > 0:
    st.write("### En √áok Aranan Terimler")
    st.write(", ".join(st.session_state.search_history))

# Arama ge√ßmi≈üini g√ºncelle
if search_term and search_term not in st.session_state.search_history:
    st.session_state.search_history.append(search_term)
